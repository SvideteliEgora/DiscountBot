import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
import config
from functions import GSFunction, unique_names
from murkups import ikb_categories, ikb_brand_names, ikb_what_next


logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.TOKEN)
dp = Dispatcher(skip_updates=True)


gs_function = GSFunction('google_data.json')


@dp.message(Command("start"))
async def cmd_start(message: types.Message) -> None:
    key = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
    unique_values = unique_names(gs_function.selecting_values_by_key(key))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É ‚¨áÔ∏è',
                         reply_markup=ikb_categories(unique_values))


@dp.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(call: types.CallbackQuery) -> None:
    category = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
    unique_values = unique_names(gs_function.selecting_values_by_key(category))
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É ‚¨áÔ∏è",
                                 reply_markup=ikb_categories(unique_values))


@dp.callback_query(F.data.startswith("category_"))
async def cb_category(callback: types.CallbackQuery) -> None:
    key = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
    value = callback.data.replace('category_', '')
    gs_data = gs_function.selecting_dicts_by_tuple((key, value))
    print(gs_data)
    brand_names = unique_names([item.get('–¢–æ—Ä–≥–æ–≤–∞—è –º–∞—Ä–∫–∞') for item in gs_data])
    print(brand_names)
    await callback.message.edit_text('–í—ã–±–∏—Ä–∞–π—Ç–µ ü•∞', reply_markup=ikb_brand_names(brand_names))


@dp.callback_query(F.data.startswith("brand_name_"))
async def cb_brand_name(callback: types.CallbackQuery) -> None:
    key = '–¢–æ—Ä–≥–æ–≤–∞—è –º–∞—Ä–∫–∞'
    value = callback.data.replace('brand_name_', '')
    gs_data = gs_function.selecting_dicts_by_tuple((key, value))
    category = gs_data[0].get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
    await callback.message.answer('–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–∫—Ü–∏–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ: –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞')
    for item in gs_data:
        text = f'–ù–∞–∑–≤–∞–Ω–∏–µ: {item.get("–¢–æ—Ä–≥–æ–≤–∞—è –º–∞—Ä–∫–∞")}\n' \
               f'–°–∫–∏–¥–∫–∞: {item.get("–°–∫–∏–¥–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É")}\n' \
               f'–°—Å—ã–ª–∫–∞: {item.get("–°—Å—ã–ª–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞")}\n' \
               f'–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {item.get("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è")}\n' \
               f'–†–µ–≥–∏–æ–Ω: {item.get("–ó–æ–Ω–∞ –æ—Ö–≤–∞—Ç–∞")}\n' \
               f'–£—Å–ª–æ–≤–∏—è –∞–∫—Ü–∏–∏: {item.get("–£—Å–ª–æ–≤–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞")}\n' \
               f'–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∏–∂–µ‚¨áÔ∏è'
        await callback.message.answer(text=text)
        await callback.message.answer(text=item.get("–ü—Ä–æ–º–æ–∫–æ–¥"))
    await callback.message.answer(text='–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è –∑–∞ —Å–∫–∏–¥–∫–∞–º–∏ –¥–∞–ª—å—à–µ?', reply_markup=ikb_what_next(category))


async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
